[project]
name = "fur-pattern-generator"
requires-python = ">=3.10"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

################################################################################
# poetry
[tool.poetry]
name = "fur-pattern-generator"
version = "0.2.0"
description = ""
authors = ["RobertHue <robert.huem@gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.10"
numpy = "^1.25.2"
opencv-python = "^4.8.0.74"
mathutils = "^3.3.0"
pillow = "^10.0.0"

[tool.poetry.group.dev.dependencies]
fake-bpy-module-latest = "^20230805"
pre-commit = "^3.3.3"
isort = "^5.12.0"
black = "^23.7.0"
ruff = "^0.0.282"
pyright = "^1.1.320"
mypy = "^1.4.1"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
codecov = "^2.1.13"

################################################################################
# PyTest

[tool.pytest.ini_options]
minversion = "7.4"
testpaths = "tests"

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "src/__init__.py",
    "src/version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.paths]
source = [
    "src/*",
]

[tool.coverage.html]
directory = "reports"

################################################################################
# FORMATTER

[tool.black]
target-versions = ["py37", "py38", "py39", "py310"]
line-length = 80
extend-exclude = '''
/(
  | .vscode
  | docs
  | .gitignore
  | poetry.lock
  | pyproject.toml
)/
'''

################################################################################
# import sorter

[tool.isort]
py_version = 39
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
default_section = "FIRSTPARTY"
known_third_party = [
    "numpy",
    "pandas",
    "keras",
    "tensorflow",
    "sklearn",
    "matplotlib",
    "scipy",
    "h5py",
    "seaborn",
    "numba",
    "gym",
    "PyQt6",
    "PyQt5",
    "pyqtgraph",
    "torch",
    "tqdm"
]
known_first_party = []
known_local_folder = []
multi_line_output = 3
lines_after_imports = 2
force_single_line = true
use_parentheses = true
ensure_newline_before_comments = true
line_length = 80
include_trailing_comma = true
skip_glob = [
  "docs/*",
  "setup.py"
]

################################################################################
# dynamic duck-style checker

[tool.mypy]
# imports related
ignore_missing_imports = true
follow_imports = "silent"
# None and Optional handling
no_implicit_optional = false
strict_optional = false
# Configuring warnings
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_return_any = false
# Untyped definitions and calls
check_untyped_defs = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
# Disallow dynamic typing
disallow_subclassing_any = false
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
# Miscellaneous strictness flags
allow_untyped_globals = true
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
# Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true
exclude = ["examples"]

################################################################################
# LINTER

[tool.ruff]
select = ["F", "E"]
extend-select = ["W", "C90", "YTT", "ANN", "ASYNC", "A", "C4", "RET", "SIM", "PLC", "PLE", "PLR", "PLW", "FLY", "PERF", "RUF", "UP", "SIM"]
ignore = ["F401", "E402", "B905", "SIM300", "PD901", "PERF203", "ANN101", "PLR5501"]
fixable = ["F", "E", "W", "UP", "C90", "YTT", "ANN", "ASYNC", "A", "C4", "RET", "SIM", "PLC", "PLE", "PLR", "PLW", "FLY", "PERF", "RUF"]
unfixable = []
line-length = 80
# extend-exclude = ["tests", "test"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
[tool.ruff.isort]
force-single-line = true
force-sort-within-sections = false
lines-after-imports = 2
[tool.ruff.mccabe]
max-complexity = 24
[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
[tool.ruff.pydocstyle]
convention = "google"
[tool.ruff.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
[tool.ruff.pylint]
max-branches = 24
max-returns = 12
max-statements = 100
max-args = 15
allow-magic-value-types = ["str", "bytes", "complex", "float", "int", "tuple"]

################################################################################
# Static Type Checker

[tool.pyright]
typeCheckingMode = "basic"
# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = true
